package com.example.tradeup_app.fragments;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.tradeup_app.R;
import com.example.tradeup_app.adapters.ProductAdapter;
import com.example.tradeup_app.firebase.FirebaseManager;
import com.example.tradeup_app.models.Product;
import com.example.tradeup_app.activities.ChatActivity;
import com.example.tradeup_app.activities.PaymentActivity;
import com.example.tradeup_app.activities.LocationSettingsActivity;
import com.example.tradeup_app.services.LocationService;
import com.example.tradeup_app.utils.VNDPriceFormatter;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;

import java.util.ArrayList;
import java.util.List;

import static android.content.Context.MODE_PRIVATE;

public class SearchFragment extends Fragment {

    private EditText searchEditText, minPriceEditText, maxPriceEditText;
    private Spinner categorySpinner, conditionSpinner, sortSpinner;
    private RecyclerView searchResultsRecyclerView;
    private View progressBar;
    // ‚úÖ TH√äM: RangeSlider cho khoÔøΩÔøΩÔøΩng gi√°
    private com.google.android.material.slider.RangeSlider priceRangeSlider;
    private TextView priceRangeText;

    // Location-based search components
    private ChipGroup locationChipGroup;
    private Chip chipLocationFilter, chipSortByDistance;
    private LocationService locationService;
    private SharedPreferences locationPrefs;
    private double userLatitude = 0;
    private double userLongitude = 0;
    private String userAddress = "";
    private boolean locationFilterEnabled = false;

    private ProductAdapter productAdapter;
    private FirebaseManager firebaseManager;
    private final List<Product> productList = new ArrayList<>();

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_search, container, false);

        initViews(view);
        setupSpinners();
        setupSearchListener();
        setupRecyclerView();
        setupFilters();

        // Check if category is passed from HomeFragment
        handleCategoryFromBundle();

        performInitialSearch();

        return view;
    }

    private void initViews(View view) {
        searchEditText = view.findViewById(R.id.search_edit_text);
        minPriceEditText = view.findViewById(R.id.min_price_edit_text);
        maxPriceEditText = view.findViewById(R.id.max_price_edit_text);
        categorySpinner = view.findViewById(R.id.category_spinner);
        conditionSpinner = view.findViewById(R.id.condition_spinner);
        sortSpinner = view.findViewById(R.id.sort_spinner);
        searchResultsRecyclerView = view.findViewById(R.id.search_results_recycler);
        progressBar = view.findViewById(R.id.progress_bar);
        // ‚úÖ TH√äM: Kh·ªüi t·∫°o RangeSlider v√† TextView hi·ªÉn th·ªã gi√° tr·ªã
        priceRangeSlider = view.findViewById(R.id.price_range_slider);
        priceRangeText = view.findViewById(R.id.price_range_text);

        // Location-based search components
        locationChipGroup = view.findViewById(R.id.location_chip_group);
        chipLocationFilter = view.findViewById(R.id.chip_location_filter);
        chipSortByDistance = view.findViewById(R.id.chip_sort_by_distance);

        firebaseManager = FirebaseManager.getInstance();

        // Initialize location services
        initLocationServices();
    }

    /**
     * Initialize location services for location-based search
     */
    private void initLocationServices() {
        if (getContext() == null) return;

        locationService = new LocationService(getContext());
        locationPrefs = getContext().getSharedPreferences("location_prefs", MODE_PRIVATE);

        // Load saved location data
        loadLocationData();

        // Setup location chips
        setupLocationChips();
    }

    /**
     * Load saved location data from SharedPreferences
     */
    private void loadLocationData() {
        userLatitude = Double.longBitsToDouble(locationPrefs.getLong("latitude", 0));
        userLongitude = Double.longBitsToDouble(locationPrefs.getLong("longitude", 0));
        userAddress = locationPrefs.getString("address", "");
        locationFilterEnabled = locationPrefs.getBoolean("location_filter_enabled", false);

        updateLocationChipsVisibility();
    }

    /**
     * Setup location filter chips
     */
    private void setupLocationChips() {
        if (chipLocationFilter != null) {
            chipLocationFilter.setOnClickListener(v -> {
                if (userLatitude == 0 && userLongitude == 0) {
                    // No location set, open location settings
                    Toast.makeText(getContext(), "Please set your location first", Toast.LENGTH_SHORT).show();
                    startActivity(new Intent(getActivity(), LocationSettingsActivity.class));
                } else {
                    // Toggle location filter
                    chipLocationFilter.setChecked(!chipLocationFilter.isChecked());
                    applyLocationFilter();
                }
            });
        }

        if (chipSortByDistance != null) {
            chipSortByDistance.setOnClickListener(v -> {
                if (userLatitude == 0 && userLongitude == 0) {
                    Toast.makeText(getContext(), "Please set your location first", Toast.LENGTH_SHORT).show();
                    startActivity(new Intent(getActivity(), LocationSettingsActivity.class));
                } else {
                    chipSortByDistance.setChecked(!chipSortByDistance.isChecked());
                    performSearch();
                }
            });
        }
    }

    /**
     * Update visibility of location chips based on location availability
     */
    private void updateLocationChipsVisibility() {
        if (locationChipGroup != null) {
            if (userLatitude != 0 && userLongitude != 0) {
                locationChipGroup.setVisibility(View.VISIBLE);

                // Update chip texts
                if (chipLocationFilter != null) {
                    int radius = locationPrefs.getInt("search_radius", 25);
                    chipLocationFilter.setText("üìç Within " + radius + " km");
                    chipLocationFilter.setChecked(locationFilterEnabled);
                }

                if (chipSortByDistance != null) {
                    chipSortByDistance.setText("üìè Sort by distance");
                }
            } else {
                locationChipGroup.setVisibility(View.GONE);
            }
        }
    }

    /**
     * Apply location-based filtering to search results
     */
    private void applyLocationFilter() {
        if (chipLocationFilter == null || !chipLocationFilter.isChecked()) {
            return;
        }

        if (userLatitude == 0 && userLongitude == 0) {
            Toast.makeText(getContext(), "Location not available", Toast.LENGTH_SHORT).show();
            chipLocationFilter.setChecked(false);
            return;
        }

        int radius = locationPrefs.getInt("search_radius", 25);

        // Filter current product list by location
        locationService.filterProductsByLocation(new ArrayList<>(productList),
            userLatitude, userLongitude, radius,
            new LocationService.ProductLocationCallback() {
                @Override
                public void onProductsFiltered(List<Product> filteredProducts) {
                    if (getActivity() != null) {
                        getActivity().runOnUiThread(() -> {
                            productList.clear();
                            productList.addAll(filteredProducts);
                            productAdapter.notifyDataSetChanged();

                            Toast.makeText(getContext(),
                                "Found " + filteredProducts.size() + " products within " + radius + " km",
                                Toast.LENGTH_SHORT).show();
                        });
                    }
                }

                @Override
                public void onError(String error) {
                    if (getActivity() != null) {
                        getActivity().runOnUiThread(() -> {
                            Toast.makeText(getContext(), "Error filtering by location: " + error,
                                Toast.LENGTH_SHORT).show();
                            chipLocationFilter.setChecked(false);
                        });
                    }
                }
            });
    }

    /**
     * Enhanced search method with location-based features
     */
    private void performLocationAwareSearch() {
        progressBar.setVisibility(View.VISIBLE);

        firebaseManager.getProducts(new FirebaseManager.ProductCallback() {
            @Override
            public void onProductsLoaded(List<Product> products) {
                if (getActivity() == null) return;

                // Apply text and filter-based search first
                List<Product> filteredProducts = applyBasicFilters(products);

                // Apply location-based filtering/sorting if enabled
                if (userLatitude != 0 && userLongitude != 0) {
                    applyLocationBasedProcessing(filteredProducts);
                } else {
                    // No location data, just display filtered results
                    displaySearchResults(filteredProducts);
                }
            }

            @Override
            public void onError(String error) {
                if (getActivity() != null) {
                    getActivity().runOnUiThread(() -> {
                        progressBar.setVisibility(View.GONE);
                        Toast.makeText(getContext(), "Search error: " + error, Toast.LENGTH_SHORT).show();
                    });
                }
            }
        });
    }

    /**
     * Apply location-based processing (filtering and/or sorting)
     */
    private void applyLocationBasedProcessing(List<Product> products) {
        boolean filterByLocation = chipLocationFilter != null && chipLocationFilter.isChecked();
        boolean sortByDistance = chipSortByDistance != null && chipSortByDistance.isChecked();

        if (filterByLocation) {
            // Filter by location radius first
            int radius = locationPrefs.getInt("search_radius", 25);
            locationService.filterProductsByLocation(products, userLatitude, userLongitude, radius,
                new LocationService.ProductLocationCallback() {
                    @Override
                    public void onProductsFiltered(List<Product> filteredProducts) {
                        if (sortByDistance) {
                            // Then sort by distance
                            sortProductsByDistance(filteredProducts);
                        } else {
                            displaySearchResults(filteredProducts);
                        }
                    }

                    @Override
                    public void onError(String error) {
                        if (getActivity() != null) {
                            getActivity().runOnUiThread(() -> {
                                Toast.makeText(getContext(), "Location filter error: " + error,
                                    Toast.LENGTH_SHORT).show();
                                displaySearchResults(products);
                            });
                        }
                    }
                });
        } else if (sortByDistance) {
            // Just sort by distance without filtering
            sortProductsByDistance(products);
        } else {
            // No location processing needed
            displaySearchResults(products);
        }
    }

    /**
     * Sort products by distance from user location
     */
    private void sortProductsByDistance(List<Product> products) {
        locationService.sortProductsByDistance(products, userLatitude, userLongitude,
            new LocationService.ProductLocationCallback() {
                @Override
                public void onProductsFiltered(List<Product> sortedProducts) {
                    displaySearchResults(sortedProducts);
                }

                @Override
                public void onError(String error) {
                    if (getActivity() != null) {
                        getActivity().runOnUiThread(() -> {
                            Toast.makeText(getContext(), "Distance sort error: " + error,
                                Toast.LENGTH_SHORT).show();
                            displaySearchResults(products);
                        });
                    }
                }
            });
    }

    /**
     * Apply basic text and category filters (existing functionality)
     */
    private List<Product> applyBasicFilters(List<Product> products) {
        List<Product> filteredProducts = new ArrayList<>();

        String searchQuery = searchEditText.getText().toString().toLowerCase().trim();
        String selectedCategory = categorySpinner.getSelectedItem().toString();
        String selectedCondition = conditionSpinner.getSelectedItem().toString();

        // Get price range from RangeSlider if available
        double minPrice = 0;
        double maxPrice = Double.MAX_VALUE;

        if (priceRangeSlider != null) {
            List<Float> values = priceRangeSlider.getValues();
            if (values.size() >= 2) {
                minPrice = values.get(0);
                maxPrice = values.get(1);
            }
        }

        for (Product product : products) {
            boolean matchesSearch = searchQuery.isEmpty() ||
                product.getTitle().toLowerCase().contains(searchQuery) ||
                product.getDescription().toLowerCase().contains(searchQuery) ||
                (product.getTags() != null && product.getTags().toString().toLowerCase().contains(searchQuery));

            boolean matchesCategory = selectedCategory.equals("T·∫•t c·∫£") ||
                product.getCategory().equals(selectedCategory);

            boolean matchesCondition = selectedCondition.equals("T·∫•t c·∫£") ||
                product.getCondition().equals(selectedCondition);

            boolean matchesPrice = product.getPrice() >= minPrice && product.getPrice() <= maxPrice;

            if (matchesSearch && matchesCategory && matchesCondition && matchesPrice) {
                filteredProducts.add(product);
            }
        }

        return filteredProducts;
    }

    /**
     * Display final search results
     */
    private void displaySearchResults(List<Product> products) {
        if (getActivity() != null) {
            getActivity().runOnUiThread(() -> {
                progressBar.setVisibility(View.GONE);
                productList.clear();
                productList.addAll(products);
                productAdapter.notifyDataSetChanged();

                // Update product adapter with user location for distance display
                if (productAdapter instanceof ProductAdapter && userLatitude != 0 && userLongitude != 0) {
                    productAdapter.setUserLocation(userLatitude, userLongitude);
                }
            });
        }
    }

    private void setupSpinners() {
        if (getContext() == null) return;

        // Category spinner
        String[] categories = {"T·∫•t c·∫£", "ƒêi·ªán t·ª≠", "Th·ªùi trang", "Xe c·ªô", "Nh√† c·ª≠a", "S√°ch", "Th·ªÉ thao", "Kh√°c"};
        ArrayAdapter<String> categoryAdapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_item, categories);
        categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        categorySpinner.setAdapter(categoryAdapter);

        // Condition spinner
        String[] conditions = {"T·∫•t c·∫£", "M·ªõi", "Nh∆∞ m·ªõi", "T·ªët", "Kh√° t·ªët", "C≈©"};
        ArrayAdapter<String> conditionAdapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_item, conditions);
        conditionAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        conditionSpinner.setAdapter(conditionAdapter);

        // Sort spinner
        String[] sortOptions = {"Li√™n quan nh·∫•t", "M·ªõi nh·∫•t", "Gi√° th·∫•p ƒë·∫øn cao", "Gi√° cao ƒë·∫øn th·∫•p"};
        ArrayAdapter<String> sortAdapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_item, sortOptions);
        sortAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        sortSpinner.setAdapter(sortAdapter);
    }

    private void setupSearchListener() {
        searchEditText.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {}

            @Override
            public void afterTextChanged(Editable s) {
                // Trigger search after 200ms delay
                searchEditText.removeCallbacks(searchRunnable);
                searchEditText.postDelayed(searchRunnable, 200);
            }
        });
    }

    private final Runnable searchRunnable = this::performSearch;

    private void setupRecyclerView() {
        if (getContext() == null) return;

        productAdapter = new ProductAdapter(getContext(), productList);
        searchResultsRecyclerView.setLayoutManager(new GridLayoutManager(getContext(), 2));
        searchResultsRecyclerView.setAdapter(productAdapter);

        productAdapter.setOnProductClickListener(new ProductAdapter.OnProductClickListener() {
            @Override
            public void onProductClick(Product product) {
                openProductDetail(product);
            }

            @Override
            public void onProductLongClick(Product product) {
                showProductOptionsMenu(product);
            }

            @Override
            public void onMakeOffer(Product product) {
                showMakeOfferDialog(product);
            }

            @Override
            public void onBuyProduct(Product product) {
                showBuyProductDialog(product);
            }

            @Override
            public void onReportProduct(Product product) {
                showReportDialog(product);
            }

            @Override
            public void onViewSellerProfile(String sellerId) {
                openSellerProfile(sellerId);
            }
        });
    }

    private void setupFilters() {
        // Setup spinner listeners
        AdapterView.OnItemSelectedListener spinnerListener = new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                performSearch();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {}
        };

        categorySpinner.setOnItemSelectedListener(spinnerListener);
        conditionSpinner.setOnItemSelectedListener(spinnerListener);
        sortSpinner.setOnItemSelectedListener(spinnerListener);

        // ‚úÖ S·ª¨A: Setup price range input listeners v·ªõi validation
        TextWatcher priceWatcher = new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {}

            @Override
            public void afterTextChanged(Editable s) {
                // ‚úÖ TH√äM: Validation kho·∫£ng gi√° tr∆∞·ªõc khi t√¨m ki·∫øm
                if (validatePriceRange()) {
                    // Delay search to avoid too many calls while typing
                    searchEditText.removeCallbacks(searchRunnable);
                    searchEditText.postDelayed(searchRunnable, 300); // Gi·∫£m t·ª´ 500ms xu·ªëng 300ms
                }
            }
        };

        minPriceEditText.addTextChangedListener(priceWatcher);
        maxPriceEditText.addTextChangedListener(priceWatcher);

        // ‚úÖ TH√äM: Thi·∫øt l·∫≠p listener cho RangeSlider
        priceRangeSlider.addOnChangeListener((slider, value, fromUser) -> {
            if (fromUser) {
                // C·∫≠p nh·∫≠t gi√° tr·ªã hi·ªÉn th·ªã khi ng∆∞·ªùi d√πng k√©o slider
                updatePriceRangeText();
                // ‚úÖ TH√äM: T·ª± ƒë·ªông t√¨m ki·∫øm khi thay ƒë·ªïi slider
                searchEditText.removeCallbacks(searchRunnable);
                searchEditText.postDelayed(searchRunnable, 200);
            }
        });

        // ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh cho RangeSlider v√† TextView
        priceRangeSlider.setValueFrom(0);
        priceRangeSlider.setValueTo(100000000); // ‚úÖ TƒÉng l√™n 100 tri·ªáu VNƒê
        priceRangeSlider.setValues(0f, 100000000f);
        updatePriceRangeText();

        // ‚úÖ TH√äM: T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh kho·∫£ng gi√° d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø
        adjustPriceRangeBasedOnData();

        // ‚úÖ TH√äM: ƒê·ªìng b·ªô EditText v·ªõi RangeSlider khi ng∆∞·ªùi d√πng nh·∫≠p tay
        TextWatcher editTextWatcher = new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {}

            @Override
            public void afterTextChanged(Editable s) {
                updateSliderFromEditText();
            }
        };

        minPriceEditText.addTextChangedListener(editTextWatcher);
        maxPriceEditText.addTextChangedListener(editTextWatcher);
    }

    // ‚úÖ TH√äM: ƒê·ªìng b·ªô RangeSlider t·ª´ EditText
    private void updateSliderFromEditText() {
        try {
            String minStr = minPriceEditText.getText().toString().trim();
            String maxStr = maxPriceEditText.getText().toString().trim();

            float minValue = minStr.isEmpty() ? 0 : Float.parseFloat(minStr);
            float maxValue = maxStr.isEmpty() ? 100000000 : Float.parseFloat(maxStr); // ‚úÖ S·ª¨A: 100 tri·ªáu

            // ƒê·∫£m b·∫£o gi√° tr·ªã trong ph·∫°m vi h·ª£p l·ªá
            minValue = Math.max(0, Math.min(minValue, 100000000)); // ‚úÖ S·ª¨A: 100 tri·ªáu
            maxValue = Math.max(minValue, Math.min(maxValue, 100000000)); // ‚úÖ S·ª¨A: 100 tri·ªáu

            // C·∫≠p nh·∫≠t slider m√† kh√¥ng trigger listener
            priceRangeSlider.clearOnChangeListeners();
            priceRangeSlider.setValues(minValue, maxValue);

            // Kh√¥i ph·ª•c listener
            priceRangeSlider.addOnChangeListener((slider, value, fromUser) -> {
                if (fromUser) {
                    updatePriceRangeText();
                    searchEditText.removeCallbacks(searchRunnable);
                    searchEditText.postDelayed(searchRunnable, 200);
                }
            });

            // C·∫≠p nh·∫≠t text hi·ªÉn th·ªã
            String text = "Kho·∫£ng gi√°: " + VNDPriceFormatter.formatVND(minValue) + " - " + VNDPriceFormatter.formatVND(maxValue);
            if (priceRangeText != null) {
                priceRangeText.setText(text);
            }

        } catch (NumberFormatException e) {
            // Ignore invalid input
        }
    }

    // ‚úÖ TH√äM: T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh kho·∫£ng gi√° d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø
    private void adjustPriceRangeBasedOnData() {
        firebaseManager.getProducts(new FirebaseManager.ProductCallback() {
            @Override
            public void onProductsLoaded(List<Product> products) {
                if (products.isEmpty() || !isAdded()) return;

                // T√¨m gi√° cao nh·∫•t v√† th·∫•p nh·∫•t trong database
                double minPrice = Double.MAX_VALUE;
                double maxPrice = 0;

                for (Product product : products) {
                    if (product.getPrice() > 0) { // Ch·ªâ t√≠nh s·∫£n phÔøΩÔøΩm c√≥ gi√° h·ª£p l·ªá
                        minPrice = Math.min(minPrice, product.getPrice());
                        maxPrice = Math.max(maxPrice, product.getPrice());
                    }
                }

                // N·∫øu t√¨m th·∫•y d·ªØ li·ªáu gi√° h·ª£p l·ªá
                if (minPrice != Double.MAX_VALUE && maxPrice > 0) {
                    // Th√™m buffer 20% ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ t√¨m ki·∫øm r·ªông h∆°n
                    double buffer = (maxPrice - minPrice) * 0.2;
                    double adjustedMin = Math.max(0, minPrice - buffer);
                    double adjustedMax = maxPrice + buffer;

                    // ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° 100 tri·ªáu
                    adjustedMax = Math.min(adjustedMax, 100000000);

                    // ‚úÖ S·ª¨A: L√†m tr√≤n gi√° tr·ªã theo stepSize ƒë·ªÉ tr√°nh crash
                    final double stepSize = 100000; // 100k VNƒê
                    final double finalAdjustedMax = Math.ceil(adjustedMax / stepSize) * stepSize;
                    final double finalAdjustedMin = Math.floor(adjustedMin / stepSize) * stepSize;

                    // C·∫≠p nh·∫≠t RangeSlider v·ªõi kho·∫£ng gi√° th·ª±c t·∫ø
                    if (getActivity() != null) {
                        getActivity().runOnUiThread(() -> {
                            try {
                                // ƒê·∫£m b·∫£o c√°c gi√° tr·ªã h·ª£p l·ªá tr∆∞·ªõc khi set
                                float maxValue = (float) Math.max(finalAdjustedMax, stepSize);
                                float minValue = (float) Math.max(finalAdjustedMin, 0);

                                // ƒê·∫£m b·∫£o maxValue l√† b·ªôi s·ªë c·ªßa stepSize
                                maxValue = (float) (Math.ceil(maxValue / stepSize) * stepSize);
                                minValue = (float) (Math.floor(minValue / stepSize) * stepSize);

                                priceRangeSlider.setValueTo(maxValue);
                                priceRangeSlider.setValues(minValue, maxValue);

                                // C·∫≠p nh·∫≠t TextView hi·ªÉn th·ªã
                                String text = "Kho·∫£ng gi√°: " + VNDPriceFormatter.formatVND(minValue) + " - " + VNDPriceFormatter.formatVND(maxValue);
                                if (priceRangeText != null) {
                                    priceRangeText.setText(text);
                                }

                                // C·∫≠p nh·∫≠t EditText
                                minPriceEditText.setText(String.valueOf((int) minValue));
                                maxPriceEditText.setText(String.valueOf((int) maxValue));

                                android.util.Log.d("SearchFragment", "üìä Kho·∫£ng gi√° ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh: " + VNDPriceFormatter.formatVND(minValue) + " - " + VNDPriceFormatter.formatVND(maxValue));
                            } catch (Exception e) {
                                android.util.Log.e("SearchFragment", "‚ùå L·ªói khi c·∫≠p nh·∫≠t RangeSlider: " + e.getMessage());
                                // Fallback to safe default values
                                priceRangeSlider.setValueTo(100000000f);
                                priceRangeSlider.setValues(0f, 100000000f);

                                if (priceRangeText != null) {
                                    priceRangeText.setText("Kho·∫£ng gi√°: " + VNDPriceFormatter.formatVND(0) + " - " + VNDPriceFormatter.formatVND(100000000));
                                }
                            }
                        });
                    }
                }
            }

            @Override
            public void onError(String error) {
                android.util.Log.e("SearchFragment", "L·ªói khi ƒëi·ªÅu ch·ªânh kho·∫£ng gi√°: " + error);
                // Gi·ªØ nguy√™n gi√° tr·ªã m·∫∑c ƒë·ªãnh 100 tri·ªáu n·∫øu c√≥ l·ªói
            }
        });
    }

    // ‚úÖ TH√äM: Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t vƒÉn b·∫£n kho·∫£ng gi√°
    private void updatePriceRangeText() {
        List<Float> values = priceRangeSlider.getValues();
        if (values.size() == 2) {
            float minValue = values.get(0);
            float maxValue = values.get(1);

            // C·∫≠p nh·∫≠t gi√° tr·ªã v√†o EditText
            minPriceEditText.setText(String.valueOf((int) minValue));
            maxPriceEditText.setText(String.valueOf((int) maxValue));

            // C·∫≠p nh·∫≠t gi√° tr·ªã hi·ªÉn th·ªã
            String text = "Kho·∫£ng gi√°: " + VNDPriceFormatter.formatVND(minValue) + " - " + VNDPriceFormatter.formatVND(maxValue);
            priceRangeText.setText(text);
        }
    }

    // ‚úÖ TH√äM: Ph∆∞∆°ng th·ª©c validation kho·∫£ng gi√°
    private boolean validatePriceRange() {
        String minPriceStr = minPriceEditText.getText().toString().trim();
        String maxPriceStr = maxPriceEditText.getText().toString().trim();

        // N·∫øu c·∫£ hai ƒë·ªÅu tr·ªëng, kh√¥ng c√≥ l·ªói
        if (minPriceStr.isEmpty() && maxPriceStr.isEmpty()) {
            clearPriceErrors();
            return true;
        }

        try {
            double minPrice = 0, maxPrice = 0;

            if (!minPriceStr.isEmpty()) {
                minPrice = Double.parseDouble(minPriceStr);
                if (minPrice < 0) {
                    minPriceEditText.setError("Gi√° kh√¥ng ƒë∆∞·ª£c √¢m");
                    return false;
                }
            }

            if (!maxPriceStr.isEmpty()) {
                maxPrice = Double.parseDouble(maxPriceStr);
                if (maxPrice < 0) {
                    maxPriceEditText.setError("Gi√° kh√¥ng ƒë∆∞·ª£c √¢m");
                    return false;
                }
            }

            // Ki·ªÉm tra minPrice <= maxPrice khi c·∫£ hai ƒë·ªÅu c√≥ gi√° tr·ªã
            if (!minPriceStr.isEmpty() && !maxPriceStr.isEmpty() && minPrice > maxPrice) {
                maxPriceEditText.setError("Gi√° t·ªëi ƒëa ph·∫£i l·ªõn h∆°n gi√° t·ªëi thi·ªÉu");
                return false;
            }

            clearPriceErrors();
            return true;

        } catch (NumberFormatException e) {
            if (!minPriceStr.isEmpty() && !isValidNumber(minPriceStr)) {
                minPriceEditText.setError("Gi√° kh√¥ng h·ª£p l·ªá");
            }
            if (!maxPriceStr.isEmpty() && !isValidNumber(maxPriceStr)) {
                maxPriceEditText.setError("Gi√° kh√¥ng h·ª£p l·ªá");
            }
            return false;
        }
    }

    // ‚úÖ TH√äM: Ph∆∞∆°ng th·ª©c ki·ªÉm tra s·ªë h·ª£p l·ªá
    private boolean isValidNumber(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    // ‚úÖ TH√äM: X√≥a l·ªói gi√°
    private void clearPriceErrors() {
        minPriceEditText.setError(null);
        maxPriceEditText.setError(null);
    }

    private void performInitialSearch() {
        firebaseManager.getProducts(new FirebaseManager.ProductCallback() {
            @Override
            public void onProductsLoaded(List<Product> products) {
                if (getActivity() != null && isAdded()) {
                    productAdapter.updateProducts(products);
                    updateEmptyState();
                }
            }

            @Override
            public void onError(String error) {
                if (getActivity() != null && isAdded()) {
                    Toast.makeText(getContext(), "L·ªói t·∫£i s·∫£n ph·∫©m: " + error, Toast.LENGTH_SHORT).show();
                    productAdapter.clearProducts();
                    updateEmptyState();
                }
            }
        });
    }

    private void performSearch() {
        String query = searchEditText.getText().toString().trim();
        String category = categorySpinner.getSelectedItemPosition() == 0 ? "" :
                        categorySpinner.getSelectedItem().toString();
        String condition = conditionSpinner.getSelectedItemPosition() == 0 ? "" :
                         conditionSpinner.getSelectedItem().toString();
        double minPrice = 0, maxPrice = 0;

        try {
            if (!minPriceEditText.getText().toString().isEmpty()) {
                minPrice = Double.parseDouble(minPriceEditText.getText().toString());
            }
            if (!maxPriceEditText.getText().toString().isEmpty()) {
                maxPrice = Double.parseDouble(maxPriceEditText.getText().toString());
            }
        } catch (NumberFormatException e) {
            if (getContext() != null) {
                Toast.makeText(getContext(), "Gi√° kh√¥ng h·ª£p l·ªá", Toast.LENGTH_SHORT).show();
            }
            return;
        }

        String sortBy = getSortByValue();
        showProgressBar();

        firebaseManager.searchProducts(query, category, condition, minPrice, maxPrice, sortBy,
            new FirebaseManager.ProductCallback() {
                @Override
                public void onProductsLoaded(List<Product> products) {
                    if (getActivity() != null && isAdded()) {
                        hideProgressBar();
                        // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t adapter an to√†n
                        productAdapter.updateProducts(products);
                        updateEmptyState();
                    }
                }

                @Override
                public void onError(String error) {
                    if (getActivity() != null && isAdded()) {
                        hideProgressBar();
                        Toast.makeText(getContext(), "L·ªói t√¨m kiÔøΩÔøΩÔøΩm: " + error, Toast.LENGTH_SHORT).show();
                        productAdapter.clearProducts();
                        updateEmptyState();
                    }
                }
            });
    }

    private String getSortByValue() {
        if (sortSpinner.getSelectedItemPosition() == 0) return null;

        String selected = sortSpinner.getSelectedItem().toString();
        switch (selected) {
            case "Gi√° th·∫•p ƒë·∫øn cao":
                return "price_asc";
            case "Gi√° cao ƒë·∫øn th·∫•p":
                return "price_desc";
            case "M·ªõi nh·∫•t":
                return "date";
            default:
                return null;
        }
    }

    private void showProgressBar() {
        if (progressBar != null) {
            progressBar.setVisibility(View.VISIBLE);
            searchResultsRecyclerView.setVisibility(View.GONE);
        }
    }

    private void hideProgressBar() {
        if (progressBar != null) {
            progressBar.setVisibility(View.GONE);
            searchResultsRecyclerView.setVisibility(View.VISIBLE);
        }
    }

    private void updateEmptyState() {
        View rootView = getView();
        if (rootView != null) {
            View emptyState = rootView.findViewById(R.id.empty_state);
            if (emptyState != null) {
                emptyState.setVisibility(productList.isEmpty() ? View.VISIBLE : View.GONE);
                searchResultsRecyclerView.setVisibility(productList.isEmpty() ? View.GONE : View.VISIBLE);
            }
        }
    }

    private void openProductDetail(Product product) {
        // Navigate to ProductDetailActivity instead of ChatActivity
        com.example.tradeup_app.activities.ProductDetailActivity.startActivity(
            getContext(), product.getId());

        // Increment view count
        firebaseManager.incrementProductViewCount(product.getId());
    }

    // NEW METHODS for handling offers and reports
    private void showProductOptionsMenu(Product product) {
        String currentUserId = firebaseManager.getCurrentUserId();
        boolean isOwner = currentUserId != null && currentUserId.equals(product.getSellerId());

        String[] options;
        if (isOwner) {
            options = new String[]{"View Offers", "Edit Product", "Mark as Sold", "Delete Product"};
        } else {
            options = new String[]{"Make Offer", "Report Product", "Save Item"};
        }

        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(requireContext());
        builder.setTitle(product.getTitle())
                .setItems(options, (dialog, which) -> {
                    if (isOwner) {
                        handleOwnerAction(product, which);
                    } else {
                        handleBuyerAction(product, which);
                    }
                })
                .show();
    }

    private void handleOwnerAction(Product product, int actionIndex) {
        switch (actionIndex) {
            case 0: // View Offers
                Intent offersIntent = new Intent(getContext(), com.example.tradeup_app.activities.OffersActivity.class);
                offersIntent.putExtra("product", product);
                offersIntent.putExtra("isSellerView", true);
                startActivity(offersIntent);
                break;
            case 1: // Edit Product
                Toast.makeText(getContext(), "Edit Product feature coming soon", Toast.LENGTH_SHORT).show();
                break;
            case 2: // Mark as Sold
                markProductAsSold(product);
                break;
            case 3: // Delete Product
                deleteProduct(product);
                break;
        }
    }

    private void handleBuyerAction(Product product, int actionIndex) {
        switch (actionIndex) {
            case 0: // Make Offer
                showMakeOfferDialog(product);
                break;
            case 1: // Report Product
                showReportDialog(product);
                break;
            case 2: // Save Item
                Toast.makeText(getContext(), "Save Item feature coming soon", Toast.LENGTH_SHORT).show();
                break;
        }
    }

    private void showMakeOfferDialog(Product product) {
        android.util.Log.d("SearchFragment", "showMakeOfferDialog called for product: " + product.getTitle());

        String currentUserId = firebaseManager.getCurrentUserId();
        android.util.Log.d("SearchFragment", "Current user ID: " + currentUserId);
        android.util.Log.d("SearchFragment", "Product seller ID: " + product.getSellerId());

        if (currentUserId == null) {
            android.util.Log.d("SearchFragment", "User not logged in - showing login message");
            if (getContext() != null) {
                Toast.makeText(getContext(), "Please login to make an offer", Toast.LENGTH_SHORT).show();
            }
            return;
        }

        if (currentUserId.equals(product.getSellerId())) {
            android.util.Log.d("SearchFragment", "User trying to make offer on own product");
            if (getContext() != null) {
                Toast.makeText(getContext(), "You cannot make an offer on your own product", Toast.LENGTH_SHORT).show();
            }
            return;
        }

        if (getContext() != null) {
            try {
                android.util.Log.d("SearchFragment", "Creating and showing MakeOfferDialog");
                com.example.tradeup_app.dialogs.MakeOfferDialog dialog = new com.example.tradeup_app.dialogs.MakeOfferDialog(
                    getContext(),
                    product,
                    (offerPrice, message) -> submitOffer(product, offerPrice, message)
                );
                dialog.show();
                android.util.Log.d("SearchFragment", "MakeOfferDialog shown successfully");
            } catch (Exception e) {
                android.util.Log.e("SearchFragment", "Error showing MakeOfferDialog", e);
                if (getContext() != null) {
                    Toast.makeText(getContext(), "Error opening offer dialog", Toast.LENGTH_SHORT).show();
                }
            }
        } else {
            android.util.Log.e("SearchFragment", "Context is null, cannot show dialog");
        }
    }

    private void showReportDialog(Product product) {
        String currentUserId = firebaseManager.getCurrentUserId();
        if (currentUserId == null) {
            if (getContext() != null) {
                Toast.makeText(getContext(), "Please login to report", Toast.LENGTH_SHORT).show();
            }
            return;
        }

        if (getContext() != null) {
            com.example.tradeup_app.dialogs.ReportDialog dialog = new com.example.tradeup_app.dialogs.ReportDialog(
                getContext(),
                (reason, description) -> submitReport(product, reason, description)
            );
            dialog.show();
        }
    }

    private void submitOffer(Product product, double offerPrice, String message) {
        String currentUserId = firebaseManager.getCurrentUserId();
        String currentUserName = com.example.tradeup_app.auth.Helper.CurrentUser.getUser() != null ?
            com.example.tradeup_app.auth.Helper.CurrentUser.getUser().getUsername() : "Anonymous";

        com.example.tradeup_app.models.Offer offer = new com.example.tradeup_app.models.Offer(
            product.getId(),
            currentUserId,
            currentUserName,
            product.getSellerId(),
            product.getPrice(),
            offerPrice,
            message
        );

        firebaseManager.submitOffer(offer, task -> {
            if (task.isSuccessful()) {
                Toast.makeText(getContext(), "Offer submitted successfully!", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(getContext(), "Failed to submit offer", Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void submitReport(Product product, String reason, String description) {
        String currentUserId = firebaseManager.getCurrentUserId();
        String currentUserName = com.example.tradeup_app.auth.Helper.CurrentUser.getUser() != null ?
            com.example.tradeup_app.auth.Helper.CurrentUser.getUser().getUsername() : "Anonymous";

        com.example.tradeup_app.models.Report report = new com.example.tradeup_app.models.Report(
            currentUserId,
            currentUserName,
            product.getSellerId(),
            product.getSellerName(),
            product.getId(),
            "PRODUCT",
            reason,
            description
        );

        firebaseManager.submitReport(report, task -> {
            if (task.isSuccessful()) {
                Toast.makeText(getContext(), "Report submitted successfully", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(getContext(), "Failed to submit report", Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void markProductAsSold(Product product) {
        new androidx.appcompat.app.AlertDialog.Builder(requireContext())
            .setTitle("Mark as Sold")
            .setMessage("Are you sure you want to mark this product as sold?")
            .setPositiveButton("Yes", (dialog, which) ->
                firebaseManager.getDatabase().getReference(com.example.tradeup_app.firebase.FirebaseManager.PRODUCTS_NODE)
                    .child(product.getId())
                    .child("status")
                    .setValue("Sold")
                    .addOnSuccessListener(aVoid -> {
                        if (getContext() != null) {
                            Toast.makeText(getContext(), "Product marked as sold", Toast.LENGTH_SHORT).show();
                        }
                        performSearch(); // Refresh search results
                    })
                    .addOnFailureListener(e -> {
                        if (getContext() != null) {
                            Toast.makeText(getContext(), "Failed to update product", Toast.LENGTH_SHORT).show();
                        }
                    })
            )
            .setNegativeButton("Cancel", null)
            .show();
    }

    private void deleteProduct(Product product) {
        new androidx.appcompat.app.AlertDialog.Builder(requireContext())
            .setTitle("Delete Product")
            .setMessage("Are you sure you want to delete this product? This action cannot be undone.")
            .setPositiveButton("Delete", (dialog, which) ->
                firebaseManager.getDatabase().getReference(com.example.tradeup_app.firebase.FirebaseManager.PRODUCTS_NODE)
                    .child(product.getId())
                    .removeValue()
                    .addOnSuccessListener(aVoid -> {
                        if (getContext() != null) {
                            Toast.makeText(getContext(), "Product deleted successfully", Toast.LENGTH_SHORT).show();
                        }
                        performSearch(); // Refresh search results
                    })
                    .addOnFailureListener(e -> {
                        if (getContext() != null) {
                            Toast.makeText(getContext(), "Failed to delete product", Toast.LENGTH_SHORT).show();
                        }
                    })
            )
            .setNegativeButton("Cancel", null)
            .show();
    }

    private void openSellerProfile(String sellerId) {
        if (sellerId != null && getContext() != null) {
            // Use the static method from UserProfileViewActivity to start the activity
            com.example.tradeup_app.auth.UserProfileViewActivity.startActivity(getContext(), sellerId);
        } else {
            if (getContext() != null) {
                Toast.makeText(getContext(), "Cannot open seller profile", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void handleCategoryFromBundle() {
        Bundle args = getArguments();
        if (args != null && args.containsKey("category")) {
            String categoryFromHome = args.getString("category");
            if (categoryFromHome != null) {
                setCategoryFilter(categoryFromHome);
            }
        }
    }

    private void setCategoryFilter(String category) {
        if (getContext() == null) return;

        // Map category names to spinner positions
        String[] categories = {"T·∫•t c·∫£", "ƒêi·ªán t·ª≠", "Th·ªùi trang", "Xe c·ªô", "Nh√† c·ª≠a", "S√°ch", "Th·ªÉ thao", "Kh√°c"};

        for (int i = 0; i < categories.length; i++) {
            if (categories[i].equals(category)) {
                categorySpinner.setSelection(i);
                // Trigger search with this category
                performSearch();
                break;
            }
        }
    }

    private void showBuyProductDialog(Product product) {
        // Implement the dialog to handle product buying
        new androidx.appcompat.app.AlertDialog.Builder(requireContext())
            .setTitle("Mua s·∫£n ph·∫©m")
            .setMessage("B·∫°n c√≥ mu·ªën mua s·∫£n ph·∫©m n√†y kh√¥ng?\n\nT√™n: " + product.getTitle() + "\nGi√°: " + formatPrice(product.getPrice()))
            .setPositiveButton("Mua ngay", (dialog, which) -> {
                // Handle the buy action
                handleBuyProduct(product);
            })
            .setNegativeButton("H·ªßy", null)
            .show();
    }

    private void handleBuyProduct(Product product) {
        String currentUserId = firebaseManager.getCurrentUserId();
        if (currentUserId == null) {
            Toast.makeText(getContext(), "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ mua s·∫£n ph·∫©m", Toast.LENGTH_SHORT).show();
            return;
        }

        if (currentUserId.equals(product.getSellerId())) {
            Toast.makeText(getContext(), "B·∫°n kh√¥ng th·ªÉ mua s·∫£n ph·∫©m c·ªßa ch√≠nh m√¨nh", Toast.LENGTH_SHORT).show();
            return;
        }

        if (!"Available".equals(product.getStatus())) {
            Toast.makeText(getContext(), "S·∫£n ph·∫©m n√†y kh√¥ng c√≤n kh·∫£ d·ª•ng", Toast.LENGTH_SHORT).show();
            return;
        }

        // Check if user has pending offers for this product
        firebaseManager.checkPendingOffers(product.getId(), currentUserId, task -> {
            if (task.isSuccessful() && task.getResult()) {
                // User has pending offers, ask if they want to proceed
                new androidx.appcompat.app.AlertDialog.Builder(requireContext())
                    .setTitle("B·∫°n c√≥ ƒë·ªÅ xu·∫•t gi√° ƒëang ch·ªù")
                    .setMessage("B·∫°n c√≥ ƒë·ªÅ xu·∫•t gi√° ƒëang ch·ªù x·ª≠ l√Ω cho s·∫£n ph·∫©m n√†y. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c mua v·ªõi gi√° g·ªëc kh√¥ng?")
                    .setPositiveButton("Ti·∫øp t·ª•c mua", (dialog, which) -> proceedToPurchase(product))
                    .setNegativeButton("H·ªßy", null)
                    .show();
            } else {
                // No pending offers, proceed directly
                proceedToPurchase(product);
            }
        });
    }

    private void proceedToPurchase(Product product) {
        new androidx.appcompat.app.AlertDialog.Builder(requireContext())
            .setTitle("X√°c nh·∫≠n mua h√†ng")
            .setMessage("B·∫°n c√≥ mu·ªën mua s·∫£n ph·∫©m n√†y kh√¥ng?\n\n" +
                       "T√™n: " + product.getTitle() + "\n" +
                       "Gi√°: " + formatPrice(product.getPrice()) + "\n\n" +
                       "B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang thanh to√°n.")
            .setPositiveButton("Mua ngay", (dialog, which) -> {
                openPaymentActivity(product);
            })
            .setNegativeButton("H·ªßy", null)
            .show();
    }

    private void openPaymentActivity(Product product) {
        Intent intent = new Intent(getContext(), PaymentActivity.class);
        intent.putExtra("product", product);
        startActivity(intent);
    }

    private String formatPrice(double price) {
        return VNDPriceFormatter.formatVND(price);
    }

    @Override
    public void onResume() {
        super.onResume();
        // Reload location data when returning from settings
        if (getContext() != null) {
            loadLocationData();
            updateLocationChipsVisibility();
        }
    }
}
